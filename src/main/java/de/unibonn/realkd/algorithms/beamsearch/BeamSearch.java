/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 University of Bonn
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package de.unibonn.realkd.algorithms.beamsearch;

import static de.unibonn.realkd.common.base.Identifier.identifier;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;

import de.unibonn.realkd.algorithms.AbstractMiningAlgorithm;
import de.unibonn.realkd.algorithms.AlgorithmCategory;
import de.unibonn.realkd.algorithms.common.FreePropositionalLogicParameter;
import de.unibonn.realkd.algorithms.common.NumberOfResultsParameter;
import de.unibonn.realkd.algorithms.common.PatternCollectionProcessor;
import de.unibonn.realkd.algorithms.common.PatternConstraint;
import de.unibonn.realkd.algorithms.common.PatternOptimizationFunction;
import de.unibonn.realkd.algorithms.common.PropositionFilter;
import de.unibonn.realkd.common.parameter.DefaultParameter;
import de.unibonn.realkd.common.parameter.Parameter;
import de.unibonn.realkd.common.workspace.Workspace;
import de.unibonn.realkd.data.propositions.AttributeBasedProposition;
import de.unibonn.realkd.data.propositions.Proposition;
import de.unibonn.realkd.data.propositions.PropositionalContext;
import de.unibonn.realkd.patterns.Pattern;
import de.unibonn.realkd.patterns.logical.LogicalDescriptor;
import de.unibonn.realkd.patterns.logical.LogicalDescriptors;
import de.unibonn.realkd.util.Predicates;

/**
 * <p>
 * General framework for heuristic level-wise beam search procedure within
 * conjunction space based on some propositional logic. Starting with a first
 * level that only contains the pattern with the empty descriptor, subsequent
 * levels are generated by augmenting all patterns of the previous level by a
 * single propositions and then selecting a small subsets of these candidates
 * (by checking each pattern against a set of pruning constraints and then by
 * selecting the top-b patterns from the remaining candidates where b is
 * referred to as the beamwidth).
 * </p>
 * <p>
 * Concrete beam search algorithms should wrap this class and provide a
 * simplified facade in terms of their specific needs. The framework provides
 * hooks for:
 * </p>
 * <ul>
 * <li>a rule of how descriptions are to be converted into patterns (by a
 * {@link Function} passed through the
 * constructor)</li>
 * 
 * <li>a rule of how to retrieve the logical descriptor from the pattern (also
 * passed through the constructor by a function).</li>
 * 
 * <li>a filter that is applied to the available proposition set prior to the
 * actual beam-search as a pre-processing step (by
 * {@link #setPropositionFilter(PropositionFilter)}</li>
 * 
 * <li>a list of pruning conditions that is applied during the search to each
 * expanded pattern (can be specified as {@link PatternConstraint} via
 * {@link #addPruningConstraint} and reset via {@link #clearPruningConstraints})
 * </li>
 * 
 * <li>a selector that assembles the next level of the search based on all
 * candidate patterns that have been generated from the previous level (via
 * {@link #setNodeForNextLevelSelector(PatternCollectionProcessor)}).
 * 
 * <li>a post-processing step that is applied to all mined results prior to the
 * call method returning any pattern (can be specified as
 * {@link PatternCollectionProcessor} via {@link #setPostProcessor}); this
 * allows also to finalize the result in the event of a user-abort.</li>
 * </ul>
 * <br>
 * <p>
 * In itself the framework has three parameters: one for the beam width, one for
 * the desired number of result patterns, and one for the search optimization
 * function. <b>Facades must makes sure that all these parameters are set on
 * execution time of beam search</b>.
 * </p>
 * 
 * @author Pavel Tokmakov
 * @author Mario Boley
 * 
 * @since 0.1.0
 * 
 * @version 0.3.0
 * 
 */
public final class BeamSearch extends AbstractMiningAlgorithm<Pattern<?>> {

	private List<? extends Proposition> propositions;

	private final BeamWidthParameter beamWidthParameter;

	private final NumberOfResultsParameter numberOfResultsParameter = new NumberOfResultsParameter();

	private final Parameter<PropositionalContext> propositionalLogicParameter;

	private PropositionFilter propositionFilter = PropositionFilter.NO_FILTER;

	private List<PatternConstraint> pruningConstraints = new ArrayList<>();

	private final Parameter<PatternOptimizationFunction> targetFunctionParameter;

	private final Function<LogicalDescriptor, ? extends Pattern<?>> toPattern;

	private final Function<Pattern<?>, LogicalDescriptor> toDescriptor;

	private PatternCollectionProcessor postProcessor;

	private PatternCollectionProcessor nodesForNextLevelSelector;

	public class DefaultBeamSearchNodesForExpansionSelector implements PatternCollectionProcessor {

		@Override
		public Collection<Pattern<?>> process(Collection<Pattern<?>> patterns) {
			PriorityQueue<Pattern<?>> result = new LimitedPriorityQueue<>(getBeamWidth(),
					BeamSearch.this.targetFunctionParameter.current().preferenceOrder().reversed(), getBeamWidth());
			result.addAll(patterns);
			return result;
		}

	}

	public BeamSearch(Workspace workspace, Function<LogicalDescriptor, ? extends Pattern<?>> descriptorToPattern,
			Function<Pattern<?>, LogicalDescriptor> patternToDescriptor) {
		this.toPattern = descriptorToPattern;
		this.toDescriptor = patternToDescriptor;
		this.postProcessor = PatternCollectionProcessor.NO_PROCESSOR;
		this.nodesForNextLevelSelector = new DefaultBeamSearchNodesForExpansionSelector();
		this.propositionalLogicParameter = new FreePropositionalLogicParameter(workspace);

		this.beamWidthParameter = new BeamWidthParameter(this, propositionalLogicParameter);
		this.targetFunctionParameter = new DefaultParameter<PatternOptimizationFunction>(identifier("opt_func"), "Target function",
				"The function optimized by the algorithm", PatternOptimizationFunction.class, null, null,
				Predicates.satisfied(), "");

		registerParameter(propositionalLogicParameter);
		registerParameter(numberOfResultsParameter);
		registerParameter(beamWidthParameter);
		registerParameter(targetFunctionParameter);
	}

	public final void addPruningConstraint(PatternConstraint constraint) {
		this.pruningConstraints.add(constraint);
	}

	public void clearPruningConstraints() {
		this.pruningConstraints.clear();
	}

	public Integer getBeamWidth() {
		return beamWidthParameter.current();
	}

	public BeamWidthParameter getBeamWidthParameter() {
		return beamWidthParameter;
	}

	@Override
	public AlgorithmCategory getCategory() {
		return AlgorithmCategory.GENERIC;
	}

	@Override
	public String description() {
		return "Searches through description space given by conjunctions of individual propositions about the data";
	}

	@Override
	public String caption() {
		return "General beam search";
	}

	public Integer getNumberOfResults() {
		return numberOfResultsParameter.current();
	}

	public NumberOfResultsParameter getNumberOfResultsParameter() {
		return numberOfResultsParameter;
	}

	public Parameter<PatternOptimizationFunction> getTargetFunctionParameter() {
		return targetFunctionParameter;
	}

	public final PropositionalContext getPropositionalLogic() {
		return this.propositionalLogicParameter.current();
	}

	public final Parameter<PropositionalContext> getPropositionalLogicParameter() {
		return this.propositionalLogicParameter;
	}

	public final void setBeamWidth(Integer beamWidth) {
		this.beamWidthParameter.set(beamWidth);
	}

	public final void setNodeForNextLevelSelector(PatternCollectionProcessor selector) {
		this.nodesForNextLevelSelector = selector;
	}

	public final void setNumberOfResults(Integer resultsLimit) {
		this.numberOfResultsParameter.set(resultsLimit);
	}

	public final void setPostProcessor(PatternCollectionProcessor postProcessor) {
		this.postProcessor = postProcessor;
	}

	public final void setPropositionFilter(PropositionFilter propositionFilter) {
		this.propositionFilter = propositionFilter;
	}

	@Override
	protected final Collection<Pattern<?>> concreteCall() {
		Collection<Pattern<?>> results = new LimitedPriorityQueue<>(getNumberOfResults(),
				this.targetFunctionParameter.current().preferenceOrder().reversed(), getNumberOfResults());

		// initialize propositions based on provided filter
		propositions = propositionFilter.filter(getPropositionalLogic());

		// initialize first level containing the pattern with the empty
		// descriptor
		Collection<Pattern<?>> selectedForRefinement = new ArrayList<>();
		selectedForRefinement.add(toPattern
				.apply(LogicalDescriptors.create(getPropositionalLogic().population(), new ArrayList<Proposition>())));

		do {
			// apply refinement operator to generate patterns
			// for current level from previous level
			Collection<Pattern<?>> nextLevel = generateNextLevel(selectedForRefinement);
			selectedForRefinement.clear();
			selectedForRefinement.addAll(nextLevel);

			/*
			 * combine these interesting patterns with previous ones and keep
			 * only most interesting {resultsLimit} number of patterns in
			 * {results}
			 */
			results.addAll(selectedForRefinement);
		} while (!stopRequested() && !selectedForRefinement.isEmpty());

		List<Pattern<?>> sortedResults = new ArrayList<>(results);

		Collections.sort(sortedResults, targetFunctionParameter.current().preferenceOrder());

		Collection<Pattern<?>> postProcessedResults = this.postProcessor.process(sortedResults);

		return postProcessedResults;
	}

	private boolean allPruningConstraintsSatisfied(Pattern<?> newPattern) {
		for (PatternConstraint constraint : this.pruningConstraints) {
			if (!constraint.satisfies(newPattern)) {
				return false;
			}
		}
		return true;
	}

	/**
	 * checks whether pattern collection already contains pattern with
	 * description containing same set of propositions
	 */
	private final boolean containsDescription(Set<Proposition> description, Collection<Pattern<?>> patternCollection) {
		for (Pattern<?> uncastPattern : patternCollection) {
			// LogicallyDescribedLocalPattern pattern =
			// (LogicallyDescribedLocalPattern) uncastPattern;

			// LogicalDescriptor descriptor = (LogicalDescriptor) uncastPattern
			// .getDescriptor();

			LogicalDescriptor descriptor = toDescriptor.apply(uncastPattern);

			Set<Proposition> patternDescription = new HashSet<>(descriptor.elements());
			if (patternDescription.equals(description)) {
				return true;
			}
		}
		return false;
	}

	private final Collection<Pattern<?>> generateNextLevelFromDescriptors(Set<LogicalDescriptor> descriptors) {
		return descriptors.stream().map(l -> toPattern.apply(l)).filter(p -> allPruningConstraintsSatisfied(p))
				.collect(Collectors.toList());
	}

	private final Collection<Pattern<?>> generateNextLevel(Collection<Pattern<?>> previousLevel) {

		Set<LogicalDescriptor> nextLevelLogicalDescriptors = new HashSet<>();

		for (Pattern<?> uncastPreviousPattern : previousLevel) {
			Pattern<?> previousPattern = uncastPreviousPattern;
			for (Proposition augmentation : this.propositions) {
				if (stopRequested()) {
					return this.nodesForNextLevelSelector
							.process(generateNextLevelFromDescriptors(nextLevelLogicalDescriptors));
				}

				LogicalDescriptor descriptor = toDescriptor.apply(previousPattern);
				if (descriptor.elements().contains(augmentation)
						|| (augmentation instanceof AttributeBasedProposition && descriptor
								.refersToAttribute(((AttributeBasedProposition<?>) augmentation).attribute()))) {
					continue;
				}

				LogicalDescriptor specialization = descriptor.specialization(augmentation);

				if (nextLevelLogicalDescriptors.contains(specialization)) {
					continue;
				}

				/*
				 * TODO: replace by using Optional<Pattern> for new candidates
				 * 
				 */
				if (specialization.supportSet().isEmpty()) {
					continue;
				}

				nextLevelLogicalDescriptors.add(specialization);

			}
		}

		return this.nodesForNextLevelSelector.process(generateNextLevelFromDescriptors(nextLevelLogicalDescriptors));
	}
}
